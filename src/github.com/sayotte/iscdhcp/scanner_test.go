package iscdhcp

import (
	"io/ioutil"
	"reflect"
	"strconv"
	"testing"
)

func Test_scanner(t *testing.T) {
	bList, err := ioutil.ReadFile("./testdata/dhcpd3-groups.conf")
	if err != nil {
		t.Fatal(err)
	}

	var s scanner
	s.init()
	var codes []int
	var codeString string
	for _, b := range bList {
		code, err := s.step(b)
		if err != nil {
			t.Fatal(err)
		}
		codes = append(codes, code)
		codeString += strconv.Itoa(code) + ","
	}

	expectedCodes := []int{
		6, 0, 0, 0, 0, 7, 2, 1, 1, 1, 6, 0, 0, 0, 0, 0, 7, 6, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 6, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6,
		0, 0, 0, 0, 0, 0, 0, 11, 1, 1, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 7, 6, 0, 11, 1, 1, 1, 1, 6, 0, 7, 6, 0, 0, 0, 0,
		0, 7, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 6, 0, 0, 7, 6, 0, 0, 0, 0, 0, 7,
		6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 10, 1, 4, 0, 0, 0, 0, 5, 1, 2, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 0, 0, 0, 0, 0, 0, 0, 7,
		4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 11, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		3, 1, 6, 0, 0, 0, 7, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 6, 0, 0, 0, 0, 0, 0, 0, 7, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		5, 11, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 6, 0, 0, 0, 7, 6, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 2, 1, 6, 0, 0, 0,
		0, 0, 0, 0, 7, 6, 0, 0, 0, 0, 0, 0, 0, 11, 1, 6, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 7, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 1, 3, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 6, 0, 0, 0, 7, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 7, 2, 1, 6, 0, 0, 0, 0, 0, 0, 0, 7, 6, 0, 0, 0, 0, 0,
		0, 0, 7, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 1, 6,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		11, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 0, 0, 0, 7, 6, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 2, 1, 6, 0, 0, 0, 0, 0, 0,
		0, 7, 6, 0, 0, 0, 0, 0, 0, 0, 7, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 11, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 6, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 11, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 0, 0,
		0, 7, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 2,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 0, 0, 0, 0, 0, 0,
		0, 7, 6, 0, 0, 0, 0, 0, 0, 0, 7, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 11, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		11, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 3, 1, 1, 6, 0, 0, 0, 0, 7, 2, 1,
		1, 1, 6, 0, 0, 0, 0, 0, 7, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 7, 6, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 0, 0, 0, 0, 0, 0, 0,
		11, 1, 1, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		7, 6, 0, 11, 1, 1, 1, 1, 1, 1, 6, 0, 0, 0, 7, 6, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 2, 1, 6, 0, 0, 0, 0, 0, 0, 0, 7,
		6, 0, 0, 0, 0, 0, 0, 0, 7, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 11, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 6, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 11, 1, 6, 0, 0, 0, 0, 0, 0, 7, 4, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 11, 3, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 6, 0, 0, 0, 7, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 7, 2, 1, 6, 0, 0, 0, 0, 0, 0, 0, 7, 6, 0, 0, 0, 0, 0, 0,
		0, 7, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 1, 6, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11,
		1, 6, 0, 0, 0, 0, 0, 0, 7, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 5, 11, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 0, 0,
		0, 7, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 2,
		1, 6, 0, 0, 0, 0, 0, 0, 0, 7, 6, 0, 0, 0, 0, 0, 0, 0, 7, 6, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 7, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 1, 6, 0, 0, 0, 0, 0,
		0, 7, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 5, 11, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 0, 0, 0, 7, 6, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 2, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 0, 0, 0, 0, 0, 0, 0, 7, 6, 0, 0, 0, 0,
		0, 0, 0, 7, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 7, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 0, 0, 0, 0, 0, 0, 7, 4, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 11, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 3, 1, 3, 1,
	}

	if !reflect.DeepEqual(codes, expectedCodes) {
		t.Error("unexpected code sequence")
		t.Logf("expected codes: %s", codeString)
	}
}
